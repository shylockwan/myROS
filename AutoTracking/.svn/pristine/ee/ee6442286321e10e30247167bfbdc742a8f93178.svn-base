//==============================================================================
//函数名： StateExecutor类的声明部分以及相关继承类的声明
//作者：王华威
//日期:  2015-7-10
//功能: 用于状态转换时执行相应动作
//修改记录：
//==============================================================================
#include <ros/ros.h>
#include "my_events.hpp"
#include <tf/tf.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/Twist.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

#pragma once

namespace autopatrol{

class StateExecutor{
public:
	virtual bool onInit()=0;
	StateExecutor();
	virtual void stateHandle(const cv::Mat& src,AutoPatrolEvent& state_,RobotStatus& robot_status_)=0;
	virtual ~StateExecutor(){};
	void setTwist(const float& lx_=0,const float& ly_=0,const float& lz_=0,
				const float& ax_=0,const float& ay_=0,const float& az_=0)
	{
			    twist_msg.angular.x = ax_;
				twist_msg.angular.y = ay_;
				twist_msg.angular.z = az_;
				twist_msg.linear.x = lx_;
				twist_msg.linear.y = ly_;
				twist_msg.linear.z = lz_;
	}
	void setTwist(const geometry_msgs::Twist& t_ )
		{
				    twist_msg.angular.x = t_.angular.x;
					twist_msg.angular.y = t_.angular.y;
					twist_msg.angular.z = t_.angular.z;
					twist_msg.linear.x = t_.linear.x;
					twist_msg.linear.y = t_.linear.y;
					twist_msg.linear.z = t_.linear.z;
		}


	geometry_msgs::Twist getTwist();
	void getPointset(const cv::Mat& in, std::vector<cv::Point>& ptset) ;

	bool processImg(const cv::Mat& src);
	std::vector<cv::Point> ptset_line,ptset_QR;

private:
	geometry_msgs::Twist twist_msg;


};

class StateReady:public StateExecutor{
public:
	StateReady()
	{

	};
	bool onInit();
	void stateHandle(const cv::Mat& src,AutoPatrolEvent& state_,RobotStatus& robot_status_);

};



class StateAutoPatrol:public StateExecutor{
public:
	StateAutoPatrol():flag_selfLocate(0),curve_counts(15),flag_havePathSelect(0){
		cur_path.setPath(0,0);
		next_path.setPath(0,0);		
	};
	bool onInit();
	void stateHandle(const cv::Mat& src, AutoPatrolEvent& state_,RobotStatus& robot_status_);
	geometry_msgs::Twist calcObjTwist(std::vector<cv::Point> ptset,const int& width,const int &height,RobotStatus& rs);
	void haveSelfLocate(const float& angleQR_){ flag_selfLocate=1;	angle_QR=angleQR_;};
	void haveNotSelflocate(){flag_selfLocate=0;};
	void setSelectPath();
private:
	int curve_counts;
	bool flag_selfLocate;
	bool flag_havePathSelect;
	float angle_QR;
	PathLink cur_path;
	PathLink next_path;
	std::vector<cv::Point> ptset_pic; //opencv坐标;
	std::vector<cv::Point2f> ptset_world;//当前世界坐标
	std::vector<cv::Point2f> ptset_world_pre; //上一帧


};

class StatePathSelect:public StateExecutor{
public:
	StatePathSelect(ros::NodeHandle& nh,StateAutoPatrol*  p):n_(nh),ap_(p),adjust_counts(5){};
	bool onInit();
	void stateHandle(const cv::Mat& src, AutoPatrolEvent& state_,RobotStatus& robot_status_);
private:
	ros::NodeHandle n_;
	StateAutoPatrol* ap_;
	int adjust_counts;
	//ros::Publisher pathselect_pub;
};
}


