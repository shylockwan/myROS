//==============================================================================
//函数名： autopatrol_ros类的实现部分
//作者：王华威
//日期:  2015-7-10
//功能: 等待客户端接收消息或者命令，切换状态并执行事件
//修改记录：
//==============================================================================
#include <autopatrol_ros.h>
#include <autopatrol.h>
namespace autopatrol {
AutoPatrol_ros::AutoPatrol_ros(ros::NodeHandle& nh) :
		 nh_(nh) ,it_(nh),update_rate(5),process_rate(3),
		img_(NULL), flag_eventFinish(0),flag_enable(0), shutdown_requested(0)
{
//nothing
	pub_vel = nh_.advertise<geometry_msgs::Twist>("/mobile_base/commands/velocity", 1);
	ready_se = new StateReady();
	patrol_se = new StateAutoPatrol();
	route_se = new StatePathSelect(nh_,dynamic_cast<StateAutoPatrol*>(patrol_se));
	se_ = ready_se;
	ROS_INFO("stateExecutor created");
	e_.cur_state = AutoPatrolEvent::ready;
	e_.next_state = AutoPatrolEvent::ready;
	e_.next_route=new PathLink();
	rs_.g_Fuyang=1.00;
	rs_.g_Chuizhi=0.262;
	rs_.g_Shuiping=0.34;
	rs_.g_Height=32.5;
	rs_.m_PtRobot=cv::Point_<float>(0.0,0.0);
	rs_.m_ThetaRobot=0.0;
}
;
AutoPatrol_ros::~AutoPatrol_ros() {
	delete ready_se;
	delete patrol_se;
	delete route_se;
	se_=NULL;
	 shutdown_requested = true;
	thread.join();
}

bool AutoPatrol_ros::onInit() {

	//sub_autopatrol=nh_.subscribe("/autopatrol/autopatrolReq",1, &AutoPatrol_ros::subCb,this);
	 cv::namedWindow("原图像", CV_WINDOW_KEEPRATIO | CV_WINDOW_NORMAL);
	thread.start(&AutoPatrol_ros::stateUpdate, *this);
	return true;
};

void AutoPatrol_ros::imageCb(const sensor_msgs::ImageConstPtr& msg) {
	if (0 == flag_enable)
		return;

	cv_bridge::CvImagePtr cv_ptr;
	try {
		cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
	} catch (cv_bridge::Exception& e) {
		ROS_ERROR("cv_bridge exception: %s", e.what());
		return;
	}
	if(img_==NULL)
	{
	//	ROS_INFO("new img");
		img_=new cv::Mat(cv_ptr->image);
	}
	else
	//	ROS_INFO("update img");
		cv_ptr->image.copyTo(*img_);

};
void AutoPatrol_ros::odomCallback(const nav_msgs::Odometry::ConstPtr& msg) {
		//ROS_INFO("(%f ,%f)  ,%f",msg->linear.x,msg->linear.y,msg->angular.z);
	if (0 == flag_enable)
			return;
		geometry_msgs::Quaternion quat = msg->pose.pose.orientation;
		rs_.m_PtRobot.y = 100*msg->pose.pose.position.x;//单位 m->cm
		rs_.m_PtRobot.x = -100*msg->pose.pose.position.y;
		rs_.m_ThetaRobot = tf::getYaw(quat);//单位 rad
}
void AutoPatrol_ros::stateUpdate() {
	ROS_INFO("Node stateUpdating");
	sub_img=it_.subscribe("/usb_cam/image_raw", 1, &AutoPatrol_ros::imageCb,this);
	odom_sub = nh_.subscribe<nav_msgs::Odometry>("/odom", 1,&AutoPatrol_ros::odomCallback, this);
	while (ros::ok() && !shutdown_requested) {
		ros::spinOnce();
		//ROS_INFO("flag=%d",shutdown_requested);
		ros::param::get("fuyang", rs_.g_Fuyang);
		ros::param::get("chuizhi", 	rs_.g_Chuizhi);
		ros::param::get("shuiping",rs_.g_Shuiping);
		ros::param::get("height", rs_.g_Height);
		if(img_!=NULL && !img_->empty())
		{
			cv::imshow("原图像",*img_);
		}
		cv::waitKey(30);
	//	update_rate.sleep();
	}
}
;
bool AutoPatrol_ros::processEvent() {
//循环，直至当前服务事件完成
while( ros::ok() &&!flag_eventFinish && flag_enable){
	if(img_==NULL||img_->empty())
	{
		ROS_INFO("no img");
		continue;
	}
	ROS_INFO("nextState: %d ", e_.next_state);
	switch (e_.next_state) {
	case AutoPatrolEvent::ready:
		if (e_.cur_state != AutoPatrolEvent::ready) { //stateChange
			se_ = this->ready_se;
			e_.cur_state=AutoPatrolEvent::ready;
			ROS_INFO("state transform to ready");

		}
		//else do nothing and spin as before
		break;
	case AutoPatrolEvent::autopatrol:
		if (e_.cur_state != AutoPatrolEvent::autopatrol) { //stateChange
			se_ = this->patrol_se;
			e_.cur_state=AutoPatrolEvent::autopatrol;
			ROS_INFO("state transform to autopatrol");
		}
		//else do nothing and spin as before
		break;
	case AutoPatrolEvent::pathselect:
		if (e_.cur_state != AutoPatrolEvent::pathselect) { //stateChange
			se_ = this->route_se;
			e_.cur_state=AutoPatrolEvent::pathselect;
			ROS_INFO("state transform to pathselect");
		}
		//else do nothing and spin as before
		break;
	default:
		ROS_INFO("what the fuck you wanna do");
		break;
	}
ROS_INFO("processing  Event3");
	if(se_!=NULL && se_->onInit())
	{
	ROS_INFO("processing  Event4");
		se_->stateHandle(*img_,e_,rs_);
		ROS_INFO("processing  Event5");
		pub_vel.publish(se_->getTwist());
	}
	else
	{
		ROS_INFO("no se");
		se_->setTwist();
	}
	flag_eventFinish=e_.flag_eventFinish;//循环检测当前事件是否完成
	ROS_INFO("flag_eventFinish= %d",flag_eventFinish);
	process_rate.sleep();
}


	return true;
};
void AutoPatrol_ros::enable(){
	flag_enable=1;
	flag_eventFinish=0;
};
void AutoPatrol_ros::disable(){
	flag_enable=0;
};
}


